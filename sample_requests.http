###############################################
# Caf√© Docker Microservices - Sample API Requests
###############################################
# Use with Visual Studio Code REST Client extension
# Run the requests in sequence to test the full application flow

###############################################
# LOYALTY CARD SERVICE
###############################################

### Check if Loyalty Service is running
GET http://localhost:8001/
Accept: application/json

### Create a new customer - John Doe
POST http://localhost:8001/customers
Content-Type: application/json

{
  "name": "John Doe",
  "email": "john.doe@example.com"
}

### Create another customer - Jane Smith
POST http://localhost:8001/customers
Content-Type: application/json

{
  "name": "Jane Smith",
  "email": "jane.smith@example.com"
}

### Get customer by ID (replace 1 with the actual customer_id)
GET http://localhost:8001/customers/1
Accept: application/json

### Get loyalty points for customer (replace 1 with the actual customer_id)
GET http://localhost:8001/customers/1/points
Accept: application/json

### Add loyalty points to customer (replace 1 with the actual customer_id)
POST http://localhost:8001/customers/1/points
Content-Type: application/json

{
  "points": 100
}

###############################################
# MENU SERVICE
###############################################

### Check if Menu Service is running
GET http://localhost:8002/
Accept: application/json

### Get all menu items
GET http://localhost:8002/menu
Accept: application/json

### Get specific menu item (replace 1 with the actual item_id)
GET http://localhost:8002/menu/1
Accept: application/json

###############################################
# POS INTEGRATION SERVICE
###############################################

### Check if POS Service is running
GET http://localhost:8003/
Accept: application/json

### Create a new transaction with customer (replace customer_id and item_ids with actual values)
POST http://localhost:8003/transactions
Content-Type: application/json

{
  "customer_id": 1,
  "items": [
    {
      "item_id": 1,
      "quantity": 2
    },
    {
      "item_id": 3,
      "quantity": 1
    }
  ]
}

### Create a transaction without customer (guest order)
POST http://localhost:8003/transactions
Content-Type: application/json

{
  "items": [
    {
      "item_id": 2,
      "quantity": 1
    }
  ]
}

### Get transaction by ID (replace 1 with the actual transaction_id)
GET http://localhost:8003/transactions/1
Accept: application/json

### Apply loyalty points to a transaction (replace 1 with the actual transaction_id)
POST http://localhost:8003/transactions/1/apply_loyalty
Content-Type: application/json

{
  "points_to_use": 50
}

###############################################
# COMPLETE WORKFLOW EXAMPLE
###############################################

### 1. Create a new customer
POST http://localhost:8001/customers
Content-Type: application/json

{
  "name": "Mike Johnson",
  "email": "mike.johnson@example.com"
}

### 2. Check available menu items
GET http://localhost:8002/menu
Accept: application/json

### 3. Create a new transaction for the customer (use the customer_id from step 1)
POST http://localhost:8003/transactions
Content-Type: application/json

{
  "customer_id": 3,
  "items": [
    {
      "item_id": 1,
      "quantity": 1
    },
    {
      "item_id": 4,
      "quantity": 2
    }
  ]
}

### 4. Check earned loyalty points (use the customer_id from step 1)
GET http://localhost:8001/customers/3/points
Accept: application/json

### 5. Apply loyalty points to the transaction (use the transaction_id from step 3)
POST http://localhost:8003/transactions/3/apply_loyalty
Content-Type: application/json

{
  "points_to_use": 10
}

### 6. Verify updated transaction (use the transaction_id from step 3)
GET http://localhost:8003/transactions/3
Accept: application/json